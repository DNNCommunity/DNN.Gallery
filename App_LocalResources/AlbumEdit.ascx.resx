<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Configuration.Action" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="GalleryHome.Action" xml:space="preserve">
    <value>Gallery Home</value>
  </data>
  <data name="plName.Text" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="plName.Help" xml:space="preserve">
    <value>Name of the album.  This is a folder name so do not use special characters.</value>
  </data>
  <data name="plTitle.Text" xml:space="preserve">
    <value>Title:</value>
  </data>
  <data name="plTitle.Help" xml:space="preserve">
    <value>Title of the album. </value>
  </data>
  <data name="plAuthor.Text" xml:space="preserve">
    <value>Author:</value>
  </data>
  <data name="plAuthor.Help" xml:space="preserve">
    <value>The author of the album.</value>
  </data>
  <data name="plClient.Text" xml:space="preserve">
    <value>Notes:</value>
  </data>
  <data name="plClient.Help" xml:space="preserve">
    <value>General purpose field whose displayed name may changed via localization files.&lt;br /&gt;&lt;b&gt;Tip&lt;/b&gt;&lt;br /&gt;This can also be turned off in the gallery configuration by not selecting it under Display Info.</value>
  </data>
  <data name="plLocation.Text" xml:space="preserve">
    <value>Location:</value>
  </data>
  <data name="plLocation.Help" xml:space="preserve">
    <value>The location where the media was shot.</value>
  </data>
  <data name="plDescription.Text" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="plDescription.Help" xml:space="preserve">
    <value>A brief description of the media album.</value>
  </data>
  <data name="plApprovedDate.Text" xml:space="preserve">
    <value>Approved Date:</value>
  </data>
  <data name="plApprovedDate.Help" xml:space="preserve">
    <value>The date which the album will be approved for viewing.</value>
  </data>
  <data name="plOwner.Text" xml:space="preserve">
    <value>Owner:</value>
  </data>
  <data name="plOwner.Help" xml:space="preserve">
    <value>The owner of the album.  </value>
  </data>
  <data name="plCategories.Text" xml:space="preserve">
    <value>Categories:</value>
  </data>
  <data name="plCategories.Help" xml:space="preserve">
    <value>The media categories this album will house.</value>
  </data>
  <data name="AddFile.Text" xml:space="preserve">
    <value>Add Album</value>
  </data>
  <data name="cmdApprovedDate.Help" xml:space="preserve">
    <value>The date which the album is approved for viewing.</value>
  </data>
  <data name="plRefuseTitle.Text" xml:space="preserve">
    <value>Private Gallery.</value>
  </data>
  <data name="plRefuseTitle.Help" xml:space="preserve">
    <value>Private Gallery.</value>
  </data>
  <data name="lblRefuse.Text" xml:space="preserve">
    <value>You do not have permission on this private gallery.</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;Gallery Album Add/Edit&lt;/h1&gt;&lt;p&gt;Configuration settings on the album level.</value>
  </data>
  <data name="AlbumDetails.Text" xml:space="preserve">
    <value>Album Details</value>
  </data>
  <data name="ControlTitle_albumedit.Text" xml:space="preserve">
    <value>Edit Album</value>
  </data>
  <data name="RootFolderDetails.Text" xml:space="preserve">
    <value>Root Folder - Details are editable only in Gallery Configuration</value>
  </data>
  <data name="AddFolders.Text" xml:space="preserve">
    <value>Add Folder</value>
  </data>
  <data name="cmdApprovedDate.Text" xml:space="preserve">
    <value>Calendar Popup</value>
  </data>
  <data name="AddFiles.Text" xml:space="preserve">
    <value>Add File(s)</value>
  </data>
  <data name="rqdFieldValidatorTxtName.ErrorMessage" xml:space="preserve">
    <value>Album Name is required.</value>
  </data>
  <data name="rqdFieldValidatorTxtTitle.ErrorMessage" xml:space="preserve">
    <value>Album Title is required.</value>
  </data>
  <data name="validateCharacters4txtName.ErrorMessage" xml:space="preserve">
    <value>Invalid character in album name.</value>
  </data>
  <data name="valApprovedDate.ErrorMessage" xml:space="preserve">
    <value>Invalid date.</value>
  </data>
  <data name="CreateChildAlbumFailed.ErrorMessage" xml:space="preserve">
    <value>An unspecified error occured while attempting to create the new child album.</value>
  </data>
  <data name="DuplicateAlbumName.ErrorMessage" xml:space="preserve">
    <value>An album with the same name already exists. Please choose another name.</value>
  </data>
</root>